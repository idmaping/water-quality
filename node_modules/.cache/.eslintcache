[{"/media/spektr/Data/Projek/sambigede/water-quality/src/index.js":"1","/media/spektr/Data/Projek/sambigede/water-quality/src/App.js":"2","/media/spektr/Data/Projek/sambigede/water-quality/src/reportWebVitals.js":"3","/media/spektr/Data/Projek/sambigede/water-quality/src/component/Navbar.js":"4","/media/spektr/Data/Projek/sambigede/water-quality/src/router/index.js":"5","/media/spektr/Data/Projek/sambigede/water-quality/src/views/About.js":"6","/media/spektr/Data/Projek/sambigede/water-quality/src/views/Home.js":"7","/media/spektr/Data/Projek/sambigede/water-quality/src/views/Map.js":"8","/media/spektr/Data/Projek/sambigede/water-quality/src/views/NotFound.js":"9","/media/spektr/Data/Projek/sambigede/water-quality/src/views/Graph.js":"10","/media/spektr/Data/Projek/sambigede/water-quality/src/views/OverrideData.js":"11","/media/spektr/Data/Projek/sambigede/water-quality/src/component/CardSensor.js":"12","/media/spektr/Data/Projek/sambigede/water-quality/src/component/SensorPlotBar.js":"13","/media/spektr/Data/Projek/sambigede/water-quality/src/component/SensorPlotLine.js":"14","/media/spektr/Data/Projek/sambigede/water-quality/src/util/firebase.js":"15","/media/spektr/Data/Projek/sambigede/water-quality/src/component/Marker.jsx":"16"},{"size":655,"mtime":1637195994975,"results":"17","hashOfConfig":"18"},{"size":296,"mtime":1637196136348,"results":"19","hashOfConfig":"18"},{"size":362,"mtime":1637195212390,"results":"20","hashOfConfig":"18"},{"size":1684,"mtime":1630985952049,"results":"21","hashOfConfig":"18"},{"size":736,"mtime":1630757861792,"results":"22","hashOfConfig":"18"},{"size":375,"mtime":1630584262544,"results":"23","hashOfConfig":"18"},{"size":7495,"mtime":1637143417907,"results":"24","hashOfConfig":"18"},{"size":1741,"mtime":1637160912810,"results":"25","hashOfConfig":"18"},{"size":372,"mtime":1630584668489,"results":"26","hashOfConfig":"18"},{"size":13352,"mtime":1637162425032,"results":"27","hashOfConfig":"18"},{"size":4990,"mtime":1637161078994,"results":"28","hashOfConfig":"18"},{"size":3167,"mtime":1637142489006,"results":"29","hashOfConfig":"18"},{"size":954,"mtime":1637160858013,"results":"30","hashOfConfig":"18"},{"size":963,"mtime":1637160650247,"results":"31","hashOfConfig":"18"},{"size":633,"mtime":1637160209713,"results":"32","hashOfConfig":"18"},{"size":482,"mtime":1630819701312,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"r8ubwl",{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"71","messages":"72","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73"},"/media/spektr/Data/Projek/sambigede/water-quality/src/index.js",[],["74","75"],"/media/spektr/Data/Projek/sambigede/water-quality/src/App.js",[],"/media/spektr/Data/Projek/sambigede/water-quality/src/reportWebVitals.js",[],"/media/spektr/Data/Projek/sambigede/water-quality/src/component/Navbar.js",[],"/media/spektr/Data/Projek/sambigede/water-quality/src/router/index.js",[],"/media/spektr/Data/Projek/sambigede/water-quality/src/views/About.js",[],"/media/spektr/Data/Projek/sambigede/water-quality/src/views/Home.js",["76","77"],"//data belum terkoneksi dg fb\n\n\nimport React, { useEffect, useState } from 'react';\nimport { Container, Row, Col } from 'react-bootstrap';\nimport CardSensor from '../component/CardSensor'\nimport firebase from '../util/firebase'\n\n\nfunction Home(props) {\n\n    const [sensorDate, setSensorDate] = useState()\n    const [sensorTime, setSensorTime] = useState()\n    const [sensorPH, setSensorPH] = useState()\n    const [sensorTDS, setSensorTDS] = useState()\n    const [sensorDO, setSensorDO] = useState()\n    const [sensorEC, setSensorEC] = useState()\n    const [sensorORP, setSensorORP] = useState()\n    const [sensorTEMP, setSensorTEMP] = useState()\n    const [sensorLon, setSensorLon] = useState()\n    const [sensorLat, setSensorLat] = useState()\n    const [sensorWC, setSensorWC] = useState()\n    const [idMachine, setIdMachine] = useState('kapal-1')\n\n\n    const getFBData = () => {\n        const dbRef = firebase.database().ref('last-data').child('kapal-1')\n        dbRef.on('value', (snapshot) => {\n            const db = snapshot.val()\n            setSensorPH(db.ph)\n            setSensorTDS(db.tds)\n            setSensorDO(db.do)\n            setSensorEC(db.ec)\n            setSensorORP(db.orp)\n            setSensorTEMP(db.temp)\n            setSensorLon(db.long)\n            setSensorLat(db.lat)\n            setSensorDate(db.date)\n            setSensorTime(db.time)\n            setSensorWC(db.wc)\n        })\n        \n    }\n    \n    useEffect(() => {\n        getFBData()\n    }, [])\n\n\n    return (\n        <div>\n            <Container fluid=\"md\">\n                <Row xs={1} md={2} className=\"g-4 justify-content-md-center\">\n                    \n                    <Col xs={'auto'} md={4}>\n                    <CardSensor\n                        title=\"PH Meter\"\n                        subtitle=\"Digunakan untuk mengetahui kadar asam dalam air. Umumnya nilai PH berkisar antara 6-8\"\n                        value={sensorPH}\n                        date={sensorDate}\n                        time={sensorTime}\n                        fontsize=\"100px\"\n                        imgsrc=\"https://firebasestorage.googleapis.com/v0/b/sambigede.appspot.com/o/webimages%2FPHE868FC.jpg?alt=media&token=0679f64a-4385-4ad5-aee4-e911ba75d319\"\n                    />\n                    </Col>\n\n                    <Col xs={'auto'} md={4}>\n                    <CardSensor\n                        title=\"TDS\"\n                        subtitle=\"Digunakan untuk mengetahui kadar asam dalam air. Umumnya nilai PH berkisar antara 6-8\"\n                        value={sensorTDS}\n                        date={sensorDate}\n                        time={sensorTime}\n                        fontsize=\"100px\"\n                        imgsrc=\"https://firebasestorage.googleapis.com/v0/b/sambigede.appspot.com/o/webimages%2FTDS00CCFF.jpg?alt=media&token=ce9b4833-ff31-4d5f-b8aa-f0de870a11f3\"\n                    />\n                    </Col>\n\n                    <Col xs={'auto'} md={4}>\n                    <CardSensor\n                        title=\"DO\"\n                        subtitle=\"Digunakan untuk mengetahui kadar asam dalam air. Umumnya nilai PH berkisar antara 6-8\"\n                        value={sensorDO}\n                        date={sensorDate}\n                        time={sensorTime}   \n                        fontsize=\"100px\"\n                        imgsrc=\"https://firebasestorage.googleapis.com/v0/b/sambigede.appspot.com/o/webimages%2FDOB3C20B.jpg?alt=media&token=a8eeb3c4-a64a-42ee-92eb-9bcfa9226b2b\"\n                    />\n                    </Col>\n\n                    <Col xs={'auto'} md={4}>\n                    <CardSensor\n                        title=\"EC\"\n                        subtitle=\"Digunakan untuk mengetahui kadar asam dalam air. Umumnya nilai PH berkisar antara 6-8\"\n                        value={sensorEC}\n                        date={sensorDate}\n                        time={sensorTime}  \n                        fontsize=\"100px\"\n                        imgsrc=\"https://firebasestorage.googleapis.com/v0/b/sambigede.appspot.com/o/webimages%2FECFF6600.jpg?alt=media&token=8c36b3bb-2187-4aec-8a81-045bff04ddae\"\n                    />\n                    </Col>\n\n                    <Col xs={'auto'} md={4}>\n                    <CardSensor\n                        title=\"ORP\"\n                        subtitle=\"Digunakan untuk mengetahui kadar asam dalam air. Umumnya nilai PH berkisar antara 6-8\"\n                        value={sensorORP}\n                        date={sensorDate}\n                        time={sensorTime}     \n                        fontsize=\"100px\"\n                        imgsrc=\"https://firebasestorage.googleapis.com/v0/b/sambigede.appspot.com/o/webimages%2FORP009933.jpg?alt=media&token=2e406356-7cfa-462d-b1ef-1bc5d2c9938a\" \n                    />\n                    </Col>\n\n                    <Col xs={'auto'} md={4}>\n                    <CardSensor\n                        title=\"Temperatur\"\n                        subtitle=\"Digunakan untuk mengetahui kadar asam dalam air. Umumnya nilai PH berkisar antara 6-8\"\n                        value={sensorTEMP}\n                        date={sensorDate}\n                        time={sensorTime}  \n                        fontsize=\"100px\"\n                        imgsrc=\"https://firebasestorage.googleapis.com/v0/b/sambigede.appspot.com/o/webimages%2FTEMPERATURE9999FF.jpg?alt=media&token=e8c5e42b-f578-4c68-bfcc-ebc49e48f799\"\n                    />\n                    </Col>\n\n                    <Col xs={'auto'} md={4}>\n                    <CardSensor\n                        title=\"Water Contact\"\n                        subtitle=\"Digunakan untuk mengetahui kadar asam dalam air. Umumnya nilai PH berkisar antara 6-8\"\n                        value={sensorWC}\n                        date={sensorDate}\n                        time={sensorTime}    \n                        fontsize=\"100px\"\n                        imgsrc=\"https://firebasestorage.googleapis.com/v0/b/sambigede.appspot.com/o/webimages%2FWATERCONTACT09769E.jpg?alt=media&token=d50ff460-ad85-496a-9c56-cba0de56e6af\"\n                    />\n                    </Col>\n\n                    <Col xs={'auto'} md={4}>\n                    <CardSensor\n                        title=\"Latitude\"\n                        subtitle=\"Digunakan untuk mengetahui kadar asam dalam air. Umumnya nilai PH berkisar antara 6-8\"\n                        value={sensorLat}\n                        date={sensorDate}\n                        time={sensorTime}    \n                        fontsize=\"60px\"\n                        imgsrc=\"https://firebasestorage.googleapis.com/v0/b/sambigede.appspot.com/o/webimages%2FLAT805E44.jpg?alt=media&token=cebaa623-160e-4599-a7c3-93db7b5f65f6\"\n                    />\n                    </Col>\n\n                    <Col xs={'auto'} md={4}>\n                    <CardSensor\n                        title=\"Longitude\"\n                        subtitle=\"Digunakan untuk mengetahui kadar asam dalam air. Umumnya nilai PH berkisar antara 6-8\"\n                        value={sensorLon}\n                        date={sensorDate}\n                        time={sensorTime}  \n                        fontsize=\"60px\"\n                        imgsrc=\"https://firebasestorage.googleapis.com/v0/b/sambigede.appspot.com/o/webimages%2FLONGE83F3C.jpg?alt=media&token=05b4c906-2466-4c34-af0a-8547e8eaf9fd\" \n                    />\n                    </Col>\n                </Row>\n            </Container>\n        </div>\n\n\n    );\n}\n\n\n\nexport default Home;","/media/spektr/Data/Projek/sambigede/water-quality/src/views/Map.js",["78","79"],"//data belum terkoneksi dg fb\n\nimport GoogleMapReact from 'google-map-react';\nimport React, { useEffect, useState } from 'react';\nimport { Container, Row } from 'react-bootstrap';\nimport Marker from '../component/Marker';\nimport firebase from '../util/firebase'\n\nfunction Map(props) {\n\n    const [sensorLon, setSensorLon] = useState(0)\n    const [sensorLat, setSensorLat] = useState(0)\n    const [idMachine, setIdMachine] = useState('kapal-1')\n    \n    const getFBData = () => {\n        const dbRef = firebase.database().ref('last-data').child(idMachine)\n        dbRef.on('value', (snapshot) => {\n            const db = snapshot.val()\n            setSensorLon(db.long)\n            setSensorLat(db.lat)\n        })   \n    }\n\n    useEffect(() => {\n        getFBData()\n        console.log(sensorLat,sensorLon);\n    }, [])\n\n\n    return (\n        <div>\n            <Container fluid=\"md\">\n                <Row xs={1} md={1} className=\"justify-content-md-center\">\n                    <div className=\"Container\" style={{ textAlign: \"center\" }}>\n                        <h1>Peta Sebaran</h1>\n                        <div style={{ height: '78vh', width: '100%' }}>\n                            <GoogleMapReact\n                                //bootstrapURLKeys={{ key: /* YOUR KEY HERE */ }}\n                                defaultCenter={{ lat: -8.1847278, lng: 112.48847 }}\n                                defaultZoom={14}\n                            >\n                                <Marker lat={sensorLat} lng={sensorLon} name=\"Kapal_1\" color=\"red\"/>\n                            </GoogleMapReact>\n                        </div>\n                    </div>\n                </Row>\n            </Container>\n        </div >\n    );\n}\n\nexport default Map;","/media/spektr/Data/Projek/sambigede/water-quality/src/views/NotFound.js",[],"/media/spektr/Data/Projek/sambigede/water-quality/src/views/Graph.js",["80","81"],"//minor bug\n//mungkin bikin tampilan lagi loading\n\nimport React, { useState } from 'react';\nimport firebase from '../util/firebase'\nimport SensorPlotLine from '../component/SensorPlotLine'\nimport SensorPlotBar from '../component/SensorPlotBar'\nimport { Row, Col, Container, InputGroup, DropdownButton, Dropdown } from 'react-bootstrap';\nimport DatePicker from 'react-date-picker';\n\n\nfunction Graph(props) {\n\n    const [sensorDate, setSensorDate] = useState()\n    const [sensorTime, setSensorTime] = useState()\n    const [sensorPH, setSensorPH] = useState()\n    const [sensorTDS, setSensorTDS] = useState()\n    const [sensorDO, setSensorDO] = useState()\n    const [sensorEC, setSensorEC] = useState()\n    const [sensorORP, setSensorORP] = useState()\n    const [sensorTEMP, setSensorTEMP] = useState()\n    //const [sensorLon, setSensorLon] = useState()\n    //const [sensorLat, setSensorLat] = useState()\n    const [sensorWC, setSensorWC] = useState()\n    //const [dbList, setDbList] = useState()\n\n    const [idMachine, setIdMachine] = useState('kapal-1')\n    const [tanggal, setTanggal] = useState('')\n    const [bulan, setBulan] = useState('')\n    const [tahun, setTahun] = useState('')\n\n    const [graphDate, setGraphDate] = useState(new Date());\n    const [graphSelect, setGraphSelect] = useState(0);\n\n    const handleGraphSelect = (e) => {\n        setGraphSelect(e)\n    }\n    const monthText = [\"Januari\", \"Februari\", \"Maret\", \"April\", \"Mei\", \"Juni\", \"Juli\", \"Agustus\", \"September\", \"Oktober\", \"November\", \"Desember\"];\n\n    const filterArr = arr => arr.filter(function (element) {\n        return element !== undefined;\n    });\n\n    const arrAvg = arr => filterArr(arr).reduce((sum, curr) => sum + Number(curr), 0) / filterArr(arr).length\n\n    //const average = (array) => array.reduce((sum, curr) => sum + Number(curr), 0) / array.length;\n\n    const grafikBulanan = () => {\n        const dbRef = firebase.database().ref('dbrt').child(idMachine).child(graphDate.getFullYear()).child(graphDate.getMonth() + 1)\n        dbRef.on('value', (snapshot) => {\n            const db = snapshot.val()\n            const bulananPH = []\n            const bulananTDS = []\n            const bulananDO = []\n            const bulananEC = []\n            const bulananORP = []\n            const bulananTEMP = []\n            const bulananWC = []\n            const bulananDate = []\n            const bulananTime = []\n\n\n            for (let id in db) {\n                const avgPH = []\n                const avgTDS = []\n                const avgDO = []\n                const avgEC = []\n                const avgORP = []\n                const avgTEMP = []\n                const avgWC = []\n                const avgDate = []\n\n                for (let data in db[id]) {\n                    //console.log(id,db[id][data].ph)\n                    avgPH.push(db[id][data].ph)\n                    avgTDS.push(db[id][data].tds)\n                    avgDO.push(db[id][data].do)\n                    avgEC.push(db[id][data].ec)\n                    avgORP.push(db[id][data].orp)\n                    avgTEMP.push(db[id][data].temp)\n                    avgWC.push(db[id][data].wc)\n                    avgDate.push(db[id][data].date)\n                    //console.log(data);\n                    \n\n                }\n\n                //ratarata(avgPH)\n                console.log(\"lakukan proses rata2 di avg PH terus di push ke var sbnrnya\");\n                console.log(\"bulan ke \", id);\n                console.log(\"seluruh\", avgPH);\n                console.log(\"rata-rata\", arrAvg(avgPH))\n\n                bulananTime.push(id)\n                bulananDate.push(avgDate)\n                bulananPH.push(arrAvg(avgPH))\n                bulananTDS.push(arrAvg(avgTDS))\n                bulananDO.push(arrAvg(avgDO))\n                bulananEC.push(arrAvg(avgEC))\n                bulananORP.push(arrAvg(avgORP))\n                bulananTEMP.push(arrAvg(avgTEMP))\n                bulananWC.push(arrAvg(avgWC))\n\n                //console.log(bulananDate);\n\n            }\n            setSensorDate(bulananDate)\n\n            try {\n                var temp = sensorDate[0][0].split(\"/\")\n                setTanggal('')\n                setBulan(monthText[temp[1] - 1])\n                setTahun(temp[2])\n                //console.log(temp)\n                setSensorTime(bulananTime)\n                setSensorPH(bulananPH)\n                setSensorTDS(bulananTDS)\n                setSensorDO(bulananDO)\n                setSensorEC(bulananEC)\n                setSensorORP(bulananORP)\n                setSensorTEMP(bulananTEMP)\n                setSensorWC(bulananWC)\n            } catch (e) {\n                console.error(\"Error\")\n                setTanggal('')\n                setBulan(\"Data\")\n                setTahun(\"Tidak Ditemukan\")\n                setSensorTime([])\n                setSensorPH([])\n                setSensorTDS([])\n                setSensorDO([])\n                setSensorEC([])\n                setSensorORP([])\n                setSensorTEMP([])\n                setSensorWC([])\n            }\n\n\n            console.log(\"Bulanan\")\n            //console.log(sensorDate);\n\n\n        })\n\n    }\n\n    const grafikHarian = () => {\n        const dbRef = firebase.database().ref('dbrt').child(idMachine).child(graphDate.getFullYear()).child(graphDate.getMonth() + 1).child(graphDate.getDate())\n        dbRef.on('value', (snapshot) => {\n            const db = snapshot.val()\n            //const listDb = []\n            const listDate = []\n            const listTime = []\n            const listPH = []\n            const listTDS = []\n            const listDO = []\n            const listEC = []\n            const listORP = []\n            const listTEMP = []\n            const listWC = []\n\n            for (let id in db) {\n                //listDb.push(db[id])\n                listDate.push(db[id].date)\n                listTime.push(db[id].time)\n                listPH.push(db[id].ph)\n                listTDS.push(db[id].tds)\n                listDO.push(db[id].do)\n                listEC.push(db[id].ec)\n                listORP.push(db[id].orp)\n                listTEMP.push(db[id].temp)\n                listWC.push(db[id].wc)\n            }\n            //setDbList(listDb)\n\n            setSensorDate(listDate)\n\n            try {\n                var temp = sensorDate[0].split(\"/\")\n                setTanggal(temp[0])\n                setBulan(monthText[temp[1] - 1])\n                setTahun(temp[2])\n                console.log(temp)\n                setSensorTime(listTime)\n                setSensorPH(listPH)\n                setSensorTDS(listTDS)\n                setSensorDO(listDO)\n                setSensorEC(listEC)\n                setSensorORP(listORP)\n                setSensorTEMP(listTEMP)\n                setSensorWC(listWC)\n\n            } catch (e) {\n                console.error(\"Error\")\n                setTanggal(\"\")\n                setBulan(\"Data\")\n                setTahun(\"Tidak Ditemukan\")\n                setSensorTime([])\n                setSensorPH([])\n                setSensorTDS([])\n                setSensorDO([])\n                setSensorEC([])\n                setSensorORP([])\n                setSensorTEMP([])\n                setSensorWC([])\n            }\n\n        })\n        console.log(\"Harian\")\n\n    }\n\n    const handleRefresh = async () => {\n\n        graphSelect > 0 ? grafikBulanan() : grafikHarian()\n\n    }\n\n    return (\n        <div>\n            <Container fluid=\"md\">\n\n                <Row xs={8} md={3} className=\"justify-content-md-center\">\n                    <div className=\"Container\" style={{ textAlign: \"center\" }}>\n                        {graphSelect > 0 ? <h1 className=\"center\">Grafik Bulanan</h1> : <h1 className=\"center\">Grafik Harian</h1>}\n                        {graphSelect > 0\n                            ? <h2 className=\"center\">{`${bulan} ${tahun}`}</h2>\n                            : <h2 className=\"center\">{`${tanggal} ${bulan} ${tahun}`}</h2>}\n                    </div>\n                    <InputGroup className=\"mb-3\">\n                        <button type=\"button\" onClick={handleRefresh} className=\"btn btn-primary\">Refresh</button>\n                        <DropdownButton\n                            variant=\"secondary\"\n                            title={graphSelect > 0 ? \"Bulanan\" : \"Harian\"}\n                            id=\"input-group-dropdown-1\"\n                            onSelect={handleGraphSelect}\n                        >\n                            <Dropdown.Item eventKey=\"0\">Harian</Dropdown.Item>\n                            <Dropdown.Item eventKey=\"1\">Bulanan</Dropdown.Item>\n                        </DropdownButton>\n\n                        <DatePicker\n                            onChange={setGraphDate}\n                            value={graphDate}\n                            format=\"d-M-y\"\n                        />\n\n                    </InputGroup>\n                </Row>\n\n\n                {graphSelect > 0\n                    ?\n                    (\n                        <Row xs={1} md={1} className=\"g-4 justify-content-md-center\">\n                            <SensorPlotBar\n                                labelname=\"PH Meter\"\n                                data={sensorPH}\n                                labels={sensorTime}\n                                linecolor='232, 104, 252'\n                            />\n                            <SensorPlotBar\n                                labelname=\"TDS\"\n                                data={sensorTDS}\n                                labels={sensorTime}\n                                linecolor='0, 204, 255'\n                            />\n                            <SensorPlotBar\n                                labelname=\"DO\"\n                                data={sensorDO}\n                                labels={sensorTime}\n                                linecolor='168, 51, 204'\n                            />\n                            <SensorPlotBar\n                                labelname=\"EC\"\n                                data={sensorEC}\n                                labels={sensorTime}\n                                linecolor='255, 102, 0'\n                            />\n                            <SensorPlotBar\n                                labelname=\"ORP\"\n                                data={sensorORP}\n                                labels={sensorTime}\n                                linecolor='0, 153, 51'\n                            />\n                            <SensorPlotBar\n                                labelname=\"Temperatur\"\n                                data={sensorTEMP}\n                                labels={sensorTime}\n                                linecolor='153, 153, 255'\n                            />\n                            <SensorPlotBar\n                                labelname=\"Water Contact\"\n                                data={sensorWC}\n                                labels={sensorTime}\n                                linecolor='9, 118, 158'\n                            />\n                        </Row>\n                    )\n                    :\n                    (\n                        <Row xs={1} md={1} className=\"g-4 justify-content-md-center\">\n                            <SensorPlotLine\n                                labelname=\"PH Meter\"\n                                data={sensorPH}\n                                labels={sensorTime}\n                                linecolor='200, 0, 0'\n                            />\n                            <SensorPlotLine\n                                labelname=\"TDS\"\n                                data={sensorTDS}\n                                labels={sensorTime}\n                                linecolor='100, 76, 102'\n                            />\n                            <SensorPlotLine\n                                labelname=\"DO\"\n                                data={sensorDO}\n                                labels={sensorTime}\n                                linecolor='3, 6, 202'\n                            />\n                            <SensorPlotLine\n                                labelname=\"EC\"\n                                data={sensorEC}\n                                labels={sensorTime}\n                                linecolor='205, 120, 62'\n                            />\n                            <SensorPlotLine\n                                labelname=\"ORP\"\n                                data={sensorORP}\n                                labels={sensorTime}\n                                linecolor='130, 150, 10'\n                            />\n                            <SensorPlotLine\n                                labelname=\"Temperatur\"\n                                data={sensorTEMP}\n                                labels={sensorTime}\n                                linecolor='3, 76, 102'\n                            />\n                            <SensorPlotLine\n                                labelname=\"Water Contact\"\n                                data={sensorWC}\n                                labels={sensorTime}\n                                linecolor='20, 153, 23'\n                            />\n                        </Row>\n                    )\n                }\n\n\n            </Container>\n        </div>\n    );\n}\n\nexport default Graph;","/media/spektr/Data/Projek/sambigede/water-quality/src/views/OverrideData.js",[],"/media/spektr/Data/Projek/sambigede/water-quality/src/component/CardSensor.js",["82","83"],"import React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport { Card, Button } from 'react-bootstrap';\n\nfunction CardSensor(props) {\n    return (\n        <div>\n\n            <Card className=\"mb-3\" style={{ minWidth: \"18rem\" }}>\n                <Card.Img src={props.imgsrc} alt=\"Card image\" />\n                <Card.ImgOverlay className=\"text-center\">\n                    <Card.Title>\n                        <p style={{ fontSize: props.fontsize, display: \"flex\", justifyContent: \"center\", textAlign: \"bottom\" }}>\n                            {props.value}\n                        </p>\n                    </Card.Title>\n                </Card.ImgOverlay>\n                <Card.Body>\n                    <Card.Title>{props.title}</Card.Title>\n                    <Card.Text>\n                        {props.subtitle}\n                    </Card.Text>\n                    \n                </Card.Body>\n                <Card.Footer>\n                    <small className=\"text-muted\">{`Terakhir di update : ${props.date} ${props.time}`}</small>\n                </Card.Footer>\n            </Card>\n\n            {/*\n\n            <div class=\"card mb-3\" style={{minWidth: \"18rem\" }}>\n                <div class=\"row g-0\">\n                    <div class=\"col-md-4\">\n                        <img src=\"https://cdn.iconscout.com/icon/premium/png-512-thumb/ph-balanced-1916308-1624203.png\" class=\"img-fluid rounded-start\" alt=\"...\"/>\n                    </div>\n                        <div class=\"col-md-8\">\n                            <div class=\"card-body\">\n                                <h5 class=\"card-title\">Card title</h5>\n                                <p class=\"card-text\">This is a wider card with supporting text below as a natural lead-in to additional content. This content is a little bit longer.</p>\n                                <p class=\"card-text\"><small class=\"text-muted\">Last updated 3 mins ago</small></p>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            \n            <Card style={{ minWidth: \"18rem\" }}>\n                <Card.Img src=\"https://cdn.iconscout.com/icon/premium/png-512-thumb/ph-balanced-1916308-1624203.png\" alt=\"Card image\" />\n                <Card.ImgOverlay className=\"text-center\">\n                    <Card.Title>\n                        <p style={{ fontSize: \"8rem\", display: \"flex\", justifyContent: \"center\", textAlign: \"bottom\" }}>\n                            {props.value}\n                        </p>\n                    </Card.Title>\n                </Card.ImgOverlay>\n                <Card.Body>\n                    <Card.Title>{props.title}</Card.Title>\n                    <Card.Text>\n                        {props.subtitle}\n                    </Card.Text>\n                    <a href=\"#\" class=\"btn btn-primary stretched-link\">Lihat Grafik</a>\n                </Card.Body>\n                <Card.Footer>\n                    <small className=\"text-muted\">{`Terakhir di update : ${props.date} ${props.time}`}</small>\n                </Card.Footer>\n            </Card>\n\n            */}\n\n        </div>\n    );\n}\n\nexport default CardSensor;","/media/spektr/Data/Projek/sambigede/water-quality/src/component/SensorPlotBar.js",["84"],"import React from 'react';\nimport { Bar, Line } from 'react-chartjs-2';\nimport { Card } from 'react-bootstrap';\n\nfunction SensorPlot(props) {\n  const data = {\n    labels: props.labels,\n    datasets: [\n      {\n        label: props.labelname,\n        data: props.data,\n        fill: false,\n        //backgroundColor: 'rgb(75, 192, 192)',\n        backgroundColor: `rgb(${props.linecolor})`,\n        borderColor: `rgb(${props.linecolor},0.5)`,\n\n        //borderColor: 'rgba(75, 192, 192, 0.7)',\n        borderWidth: 3,\n        pointStyle: 'circle',\n        pointRadius: 1,\n        tension: 0.1,\n      },\n    ],\n  }\n  \n  const options = {\n    scales: {\n      yAxes: [\n        {\n          ticks: {\n            beginAtZero: true,\n          },\n        },\n      ],\n    },\n  }\n\n  return (\n    <div>\n      <Card className=\"mb-3\" style={{ minWidth: \"18rem\" }}>\n        <Bar data={data} options={options}/>\n      </Card>\n\n    </div>\n  );\n}\n\nexport default SensorPlot;","/media/spektr/Data/Projek/sambigede/water-quality/src/component/SensorPlotLine.js",["85"],"import React from 'react';\nimport { Bar, Line } from 'react-chartjs-2';\nimport { Card } from 'react-bootstrap';\n\nfunction SensorPlotLine(props) {\n  const data = {\n    labels: props.labels,\n    datasets: [\n      {\n        label: props.labelname,\n        data: props.data,\n        fill: false,\n        //backgroundColor: 'rgb(75, 192, 192)',\n        backgroundColor: `rgb(${props.linecolor})`,\n        borderColor: `rgb(${props.linecolor},0.5)`,\n\n        //borderColor: 'rgba(75, 192, 192, 0.7)',\n        borderWidth: 3,\n        pointStyle: 'circle',\n        pointRadius: 1,\n        tension: 0.1,\n      },\n    ],\n  }\n  \n  const options = {\n    scales: {\n      yAxes: [\n        {\n          ticks: {\n            beginAtZero: true,\n          },\n        },\n      ],\n    },\n  }\n\n  return (\n    <div>\n      <Card className=\"mb-3\" style={{ minWidth: \"18rem\" }}>\n        <Line data={data} options={options}/>\n      </Card>\n\n    </div>\n  );\n}\n\nexport default SensorPlotLine;","/media/spektr/Data/Projek/sambigede/water-quality/src/util/firebase.js",[],"/media/spektr/Data/Projek/sambigede/water-quality/src/component/Marker.jsx",["86"],"import React from 'react';\nimport './Marker.css';\n\nconst Marker = (props) => {\n  const { color, name, id } = props;\n  return (\n    <div>\n      <div\n        className=\"pin bounce\"\n        style={{ backgroundColor: color, cursor: 'pointer' }}\n        title={name}\n      />\n      <div className=\"pulse\" />\n      <br/>\n      <p>\n        <font size=\"4\"\n          face=\"arial\"\n          color={color}>\n          {name}\n        </font>\n      </p>\n    </div>\n  );\n};\n\nexport default Marker;",{"ruleId":"87","replacedBy":"88"},{"ruleId":"89","replacedBy":"90"},{"ruleId":"91","severity":1,"message":"92","line":23,"column":12,"nodeType":"93","messageId":"94","endLine":23,"endColumn":21},{"ruleId":"91","severity":1,"message":"95","line":23,"column":23,"nodeType":"93","messageId":"94","endLine":23,"endColumn":35},{"ruleId":"91","severity":1,"message":"95","line":13,"column":23,"nodeType":"93","messageId":"94","endLine":13,"endColumn":35},{"ruleId":"96","severity":1,"message":"97","line":27,"column":8,"nodeType":"98","endLine":27,"endColumn":10,"suggestions":"99"},{"ruleId":"91","severity":1,"message":"100","line":8,"column":15,"nodeType":"93","messageId":"94","endLine":8,"endColumn":18},{"ruleId":"91","severity":1,"message":"95","line":27,"column":23,"nodeType":"93","messageId":"94","endLine":27,"endColumn":35},{"ruleId":"91","severity":1,"message":"101","line":2,"column":10,"nodeType":"93","messageId":"94","endLine":2,"endColumn":17},{"ruleId":"91","severity":1,"message":"102","line":3,"column":16,"nodeType":"93","messageId":"94","endLine":3,"endColumn":22},{"ruleId":"91","severity":1,"message":"103","line":2,"column":15,"nodeType":"93","messageId":"94","endLine":2,"endColumn":19},{"ruleId":"91","severity":1,"message":"104","line":2,"column":10,"nodeType":"93","messageId":"94","endLine":2,"endColumn":13},{"ruleId":"91","severity":1,"message":"105","line":5,"column":24,"nodeType":"93","messageId":"94","endLine":5,"endColumn":26},"no-native-reassign",["106"],"no-negated-in-lhs",["107"],"no-unused-vars","'idMachine' is assigned a value but never used.","Identifier","unusedVar","'setIdMachine' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'getFBData', 'sensorLat', and 'sensorLon'. Either include them or remove the dependency array.","ArrayExpression",["108"],"'Col' is defined but never used.","'NavLink' is defined but never used.","'Button' is defined but never used.","'Line' is defined but never used.","'Bar' is defined but never used.","'id' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"109","fix":"110"},"Update the dependencies array to be: [getFBData, sensorLat, sensorLon]",{"range":"111","text":"112"},[814,816],"[getFBData, sensorLat, sensorLon]"]