{"ast":null,"code":"var _jsxFileName = \"/media/spektrum/Data/Projek/sambigede/sambigede/src/component/SensorPlot.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport firebase from '../util/firebase';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction GraphPlot(props) {\n  _s();\n\n  const [sensorDate, setSensorDate] = useState();\n  const [sensorTime, setSensorTime] = useState();\n  const [sensorPH, setSensorPH] = useState();\n  const [sensorTDS, setSensorTDS] = useState();\n  const [sensorDO, setSensorDO] = useState();\n  const [sensorEC, setSensorEC] = useState();\n  const [sensorORC, setSensorORC] = useState();\n  const [sensorTEMP, setSensorTEMP] = useState();\n  const [sensorLon, setSensorLon] = useState();\n  const [sensorLat, setSensorLat] = useState();\n  const [dbList, setDbList] = useState();\n  useEffect(() => {\n    const dbRef = firebase.database().ref('realtime-db');\n    dbRef.on('value', snapshot => {\n      const db = snapshot.val();\n      const listDate = [];\n      const listTime = [];\n      const listPH = [];\n      const listTDS = [];\n      const listDO = [];\n      const listEC = [];\n      const listORC = [];\n      const listTEMP = [];\n      const listLon = [];\n      const listLat = [];\n      const listDb = [];\n\n      for (let id in db) {\n        /*\n        listDate.push({id, ...db[id].date})\n        listTime.push({id, ...db[id].time})\n        listPH.push({id, ...db[id].ph})\n        listTDS.push({id, ...db[id].tds})\n        listDO.push({id, ...db[id].do})\n        listEC.push({id, ...db[id].ec})\n        listORC.push({id, ...db[id].orc})\n        listTEMP.push({id, ...db[id].temp})\n        listLon.push({id, ...db[id].lon})\n        listLat.push({id, ...db[id].lat})\n        listDb.push({id, ...db[id]})   \n        */\n        listTime.push(db[id].time);\n        listPH.push(db[id].ph);\n      }\n\n      setSensorTime(listTime);\n      setSensorPH(listPH);\n      /*\n      setDbList(listDb)\n      setSensorDate(listDate)\n      setSensorTime(listTime)\n      setSensorPH(listPH)\n      setSensorTDS(listTDS)\n      setSensorDO(listDO)\n      setSensorEC(listEC)\n      setSensorORC(listORC)\n      setSensorTEMP(listTEMP)\n      setSensorLon(listLon)\n      setSensorLat(listLat)\n      */\n      //console.log(listTDS);\n    });\n  }, []);\n  const data = {\n    labels: ['1', '2', '3', '4', '5', '6'],\n    datasets: [{\n      label: '# of Votes',\n      data: [12, 19, 3, 5, 2, 3],\n      fill: false,\n      backgroundColor: 'rgb(255, 99, 132)',\n      borderColor: 'rgba(255, 99, 132, 0.2)'\n    }]\n  };\n  const options = {\n    scales: {\n      yAxes: [{\n        ticks: {\n          beginAtZero: true\n        }\n      }]\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [console.log(sensorTEMP), /*#__PURE__*/_jsxDEV(Line, {\n      data: data,\n      options: options\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 105,\n    columnNumber: 9\n  }, this);\n}\n\n_s(GraphPlot, \"3nSkJmhvTdDKrRAXxe04EQDqV8c=\");\n\n_c = GraphPlot;\nexport default GraphPlot;\n\nvar _c;\n\n$RefreshReg$(_c, \"GraphPlot\");","map":{"version":3,"sources":["/media/spektrum/Data/Projek/sambigede/sambigede/src/component/SensorPlot.js"],"names":["React","useEffect","useState","Line","firebase","GraphPlot","props","sensorDate","setSensorDate","sensorTime","setSensorTime","sensorPH","setSensorPH","sensorTDS","setSensorTDS","sensorDO","setSensorDO","sensorEC","setSensorEC","sensorORC","setSensorORC","sensorTEMP","setSensorTEMP","sensorLon","setSensorLon","sensorLat","setSensorLat","dbList","setDbList","dbRef","database","ref","on","snapshot","db","val","listDate","listTime","listPH","listTDS","listDO","listEC","listORC","listTEMP","listLon","listLat","listDb","id","push","time","ph","data","labels","datasets","label","fill","backgroundColor","borderColor","options","scales","yAxes","ticks","beginAtZero","console","log"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport firebase from '../util/firebase'\n\nfunction GraphPlot(props) {\n    \n    const [sensorDate,  setSensorDate] = useState()\n    const [sensorTime,  setSensorTime] = useState()\n    const [sensorPH,    setSensorPH]   = useState()\n    const [sensorTDS,   setSensorTDS]  = useState()\n    const [sensorDO,    setSensorDO]   = useState()\n    const [sensorEC,    setSensorEC]   = useState()\n    const [sensorORC,   setSensorORC]  = useState()\n    const [sensorTEMP,  setSensorTEMP] = useState()\n    const [sensorLon,   setSensorLon]  = useState()\n    const [sensorLat,   setSensorLat]  = useState()\n    const [dbList,      setDbList]     = useState()\n    \n    useEffect(() => {\n        const dbRef = firebase.database().ref('realtime-db')\n        dbRef.on('value',(snapshot) => {\n            const db = snapshot.val()\n    \n            const listDate = []\n            const listTime = []\n            const listPH = []\n            const listTDS = []\n            const listDO = []\n            const listEC = []\n            const listORC = []\n            const listTEMP = []\n            const listLon = []\n            const listLat = []\n            const listDb = []\n            \n            \n            for (let id in db){\n                /*\n                listDate.push({id, ...db[id].date})\n                listTime.push({id, ...db[id].time})\n                listPH.push({id, ...db[id].ph})\n                listTDS.push({id, ...db[id].tds})\n                listDO.push({id, ...db[id].do})\n                listEC.push({id, ...db[id].ec})\n                listORC.push({id, ...db[id].orc})\n                listTEMP.push({id, ...db[id].temp})\n                listLon.push({id, ...db[id].lon})\n                listLat.push({id, ...db[id].lat})\n                listDb.push({id, ...db[id]})   \n                */\n                listTime.push(db[id].time)\n                listPH.push(db[id].ph)\n\n\n            }\n\n            setSensorTime(listTime)\n            setSensorPH(listPH)\n\n            /*\n            setDbList(listDb)\n            setSensorDate(listDate)\n            setSensorTime(listTime)\n            setSensorPH(listPH)\n            setSensorTDS(listTDS)\n            setSensorDO(listDO)\n            setSensorEC(listEC)\n            setSensorORC(listORC)\n            setSensorTEMP(listTEMP)\n            setSensorLon(listLon)\n            setSensorLat(listLat)\n            */\n            //console.log(listTDS);\n        })\n    },[])\n\n    const data = {\n        labels: ['1', '2', '3', '4', '5', '6'],\n        datasets: [\n          {\n            label: '# of Votes',\n            data: [12, 19, 3, 5, 2, 3],\n            fill: false,\n            backgroundColor: 'rgb(255, 99, 132)',\n            borderColor: 'rgba(255, 99, 132, 0.2)',\n          },\n        ],\n      }\n      \n    const options = {\n        scales: {\n          yAxes: [\n            {\n              ticks: {\n                beginAtZero: true,\n              },\n            },\n          ],\n        },\n      }\n    \n\n\n    return (\n        <div>\n            {\n                console.log(sensorTEMP)\n            }\n            <Line data={data} options={options} />\n        </div>\n    );\n}\n\nexport default GraphPlot;"]},"metadata":{},"sourceType":"module"}