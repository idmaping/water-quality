{"ast":null,"code":"var _jsxFileName = \"/media/spektrum/Data/Projek/sambigede/sambigede/src/component/UploadImage.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport firebase from '../util/firebase';\nimport { v4 as uuid } from 'uuid';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction UploadImage(props) {\n  _s();\n\n  const [imageUrl, setImageUrl] = useState([]);\n\n  const readImage = async e => {\n    const file = e.target.files[0];\n    const id = uuid();\n    const storageRef = firebase.storage().ref('images').child(id);\n    const imageRef = firebase.database().ref('images').child('daily').child(id);\n    await storageRef.put(file);\n    storageRef.getDownloadURL().then(url => {\n      imageRef.set(url);\n      const newState = [...imageUrl, {\n        id,\n        url\n      }];\n      setImageUrl(newState);\n    });\n  };\n\n  const getImageUrl = () => {\n    const imageRef = firebase.database().ref('images').child('daily');\n    imageRef.on('value', snapshot => {\n      const imageUrls = snapshot.val();\n      const urls = [];\n\n      for (let id in imageUrls) {\n        urls.push({\n          id,\n          url: imageUrls[id]\n        });\n      }\n\n      const newState = [...imageUrl, ...urls];\n      setImageUrl(newState);\n    });\n  };\n\n  const deleteImage = id => {\n    const storageRef = firebase.storage().ref('images').child(id);\n    const imageRef = firebase.database().ref('images').child('daily').child(id);\n    storage.delete().then(() => {\n      imageRef.remove();\n    });\n  };\n\n  useEffect(() => {\n    getImageUrl();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Upload Image\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      accept: \"image/*\",\n      onChange: readImage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }, this), imageUrl ? imageUrl.map(({\n      id,\n      url\n    }) => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: url,\n          alt: \"\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          children: \"Delete\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 29\n        }, this)]\n      }, id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 25\n      }, this);\n    }) : '']\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 9\n  }, this);\n}\n\n_s(UploadImage, \"jfjAW7tSrwxUVbyR/MrBnIf5vmc=\");\n\n_c = UploadImage;\nexport default UploadImage;\n\nvar _c;\n\n$RefreshReg$(_c, \"UploadImage\");","map":{"version":3,"sources":["/media/spektrum/Data/Projek/sambigede/sambigede/src/component/UploadImage.js"],"names":["React","useEffect","useState","firebase","v4","uuid","UploadImage","props","imageUrl","setImageUrl","readImage","e","file","target","files","id","storageRef","storage","ref","child","imageRef","database","put","getDownloadURL","then","url","set","newState","getImageUrl","on","snapshot","imageUrls","val","urls","push","deleteImage","delete","remove","map"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,QAAP,MAAqB,kBAArB;AACA,SAAQC,EAAE,IAAIC,IAAd,QAAyB,MAAzB;;;AAEA,SAASC,WAAT,CAAqBC,KAArB,EAA4B;AAAA;;AACxB,QAAM,CAACC,QAAD,EAAUC,WAAV,IAAyBP,QAAQ,CAAC,EAAD,CAAvC;;AAEA,QAAMQ,SAAS,GAAG,MAAMC,CAAN,IAAY;AAC1B,UAAMC,IAAI,GAAGD,CAAC,CAACE,MAAF,CAASC,KAAT,CAAe,CAAf,CAAb;AACA,UAAMC,EAAE,GAAGV,IAAI,EAAf;AACA,UAAMW,UAAU,GAAGb,QAAQ,CAACc,OAAT,GAAmBC,GAAnB,CAAuB,QAAvB,EAAiCC,KAAjC,CAAuCJ,EAAvC,CAAnB;AACA,UAAMK,QAAQ,GAAGjB,QAAQ,CAACkB,QAAT,GAAoBH,GAApB,CAAwB,QAAxB,EAAkCC,KAAlC,CAAwC,OAAxC,EAAiDA,KAAjD,CAAuDJ,EAAvD,CAAjB;AACA,UAAMC,UAAU,CAACM,GAAX,CAAeV,IAAf,CAAN;AACAI,IAAAA,UAAU,CAACO,cAAX,GAA4BC,IAA5B,CAAkCC,GAAD,IAAS;AACtCL,MAAAA,QAAQ,CAACM,GAAT,CAAaD,GAAb;AACA,YAAME,QAAQ,GAAG,CAAC,GAAGnB,QAAJ,EAAa;AAACO,QAAAA,EAAD;AAAKU,QAAAA;AAAL,OAAb,CAAjB;AACAhB,MAAAA,WAAW,CAACkB,QAAD,CAAX;AACH,KAJD;AAKH,GAXD;;AAaA,QAAMC,WAAW,GAAG,MAAM;AACtB,UAAMR,QAAQ,GAAGjB,QAAQ,CAACkB,QAAT,GAAoBH,GAApB,CAAwB,QAAxB,EAAkCC,KAAlC,CAAwC,OAAxC,CAAjB;AACAC,IAAAA,QAAQ,CAACS,EAAT,CAAY,OAAZ,EAAqBC,QAAD,IAAa;AAC7B,YAAMC,SAAS,GAAGD,QAAQ,CAACE,GAAT,EAAlB;AACA,YAAMC,IAAI,GAAG,EAAb;;AACA,WAAK,IAAIlB,EAAT,IAAegB,SAAf,EAAyB;AACrBE,QAAAA,IAAI,CAACC,IAAL,CAAU;AAACnB,UAAAA,EAAD;AAAIU,UAAAA,GAAG,EAAEM,SAAS,CAAChB,EAAD;AAAlB,SAAV;AACH;;AACD,YAAMY,QAAQ,GAAG,CAAC,GAAGnB,QAAJ,EAAc,GAAGyB,IAAjB,CAAjB;AACAxB,MAAAA,WAAW,CAACkB,QAAD,CAAX;AACH,KARD;AASH,GAXD;;AAaA,QAAMQ,WAAW,GAAIpB,EAAD,IAAQ;AACxB,UAAMC,UAAU,GAAGb,QAAQ,CAACc,OAAT,GAAmBC,GAAnB,CAAuB,QAAvB,EAAiCC,KAAjC,CAAuCJ,EAAvC,CAAnB;AACA,UAAMK,QAAQ,GAAGjB,QAAQ,CAACkB,QAAT,GAAoBH,GAApB,CAAwB,QAAxB,EAAkCC,KAAlC,CAAwC,OAAxC,EAAiDA,KAAjD,CAAuDJ,EAAvD,CAAjB;AACAE,IAAAA,OAAO,CAACmB,MAAR,GAAiBZ,IAAjB,CAAsB,MAAK;AACvBJ,MAAAA,QAAQ,CAACiB,MAAT;AACH,KAFD;AAGH,GAND;;AAQApC,EAAAA,SAAS,CAAC,MAAM;AACZ2B,IAAAA,WAAW;AACd,GAFQ,EAEP,EAFO,CAAT;AAIA,sBACI;AAAA,4BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAO,MAAA,IAAI,EAAC,MAAZ;AAAmB,MAAA,MAAM,EAAC,SAA1B;AAAoC,MAAA,QAAQ,EAAElB;AAA9C;AAAA;AAAA;AAAA;AAAA,YAFJ,EAGKF,QAAQ,GACHA,QAAQ,CAAC8B,GAAT,CAAa,CAAC;AAACvB,MAAAA,EAAD;AAAIU,MAAAA;AAAJ,KAAD,KAAc;AACzB,0BACI;AAAA,gCACI;AAAK,UAAA,GAAG,EAAEA,GAAV;AAAe,UAAA,GAAG,EAAC;AAAnB;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFJ;AAAA,SAAUV,EAAV;AAAA;AAAA;AAAA;AAAA,cADJ;AAMH,KAPC,CADG,GASH,EAZV;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAkBH;;GA3DQT,W;;KAAAA,W;AA6DT,eAAeA,WAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport firebase from '../util/firebase'\nimport {v4 as uuid} from 'uuid'\n\nfunction UploadImage(props) {\n    const [imageUrl,setImageUrl] = useState([])\n\n    const readImage = async(e) => {\n        const file = e.target.files[0]\n        const id = uuid()\n        const storageRef = firebase.storage().ref('images').child(id)\n        const imageRef = firebase.database().ref('images').child('daily').child(id)\n        await storageRef.put(file)\n        storageRef.getDownloadURL().then((url) => {\n            imageRef.set(url)\n            const newState = [...imageUrl,{id, url}]\n            setImageUrl(newState)\n        })\n    }\n\n    const getImageUrl = () => {\n        const imageRef = firebase.database().ref('images').child('daily')\n        imageRef.on('value',(snapshot) =>{\n            const imageUrls = snapshot.val()\n            const urls = []\n            for (let id in imageUrls){\n                urls.push({id,url: imageUrls[id]})\n            }\n            const newState = [...imageUrl, ...urls]\n            setImageUrl(newState)\n        })\n    }\n\n    const deleteImage = (id) => {\n        const storageRef = firebase.storage().ref('images').child(id)\n        const imageRef = firebase.database().ref('images').child('daily').child(id)\n        storage.delete().then(() =>{\n            imageRef.remove()\n        })\n    }\n\n    useEffect(() => {\n        getImageUrl()\n    },[])\n\n    return (\n        <div>\n            <h1>Upload Image</h1>\n            <input type=\"file\" accept=\"image/*\" onChange={readImage}></input>\n            {imageUrl\n                ? imageUrl.map(({id,url}) => {\n                    return (\n                        <div key={id}>\n                            <img src={url} alt=\"\"/>\n                            <button>Delete</button>\n                        </div>\n                    )\n                })\n                : ''\n\n            }\n        </div>\n    );\n}\n\nexport default UploadImage;"]},"metadata":{},"sourceType":"module"}