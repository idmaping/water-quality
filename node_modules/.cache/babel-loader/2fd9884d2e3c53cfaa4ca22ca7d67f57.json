{"ast":null,"code":"var _jsxFileName = \"/media/spektrum/Data/Projek/sambigede/sambigede/src/component/SensorPlot.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport firebase from '../util/firebase';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction GraphPlot(props) {\n  _s();\n\n  const [dbList, setDbList] = useState();\n  const [sensorDate, setSensorDate] = useState();\n  const [sensorTime, setSensorTime] = useState();\n  const [sensorPH, setSensorPH] = useState();\n  const [sensorTDS, setSensorTDS] = useState();\n  const [sensorDO, setSensorDO] = useState();\n  const [sensorEC, setSensorEC] = useState();\n  const [sensorORC, setSensorORC] = useState();\n  const [sensorTEMP, setSensorTEMP] = useState();\n  useEffect(() => {\n    const dbRef = firebase.database().ref('realtime-db');\n    dbRef.on('value', snapshot => {\n      const db = snapshot.val();\n      const phList = [];\n\n      for (let id in db) {\n        phList.push({\n          id,\n          ...db[id].ph\n        });\n      }\n\n      setDbList(dbList);\n      console.log(phList);\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"test\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 9\n  }, this);\n}\n\n_s(GraphPlot, \"OVZDLeDauJxQHiLVFcrfwj/vKfU=\");\n\n_c = GraphPlot;\nexport default GraphPlot;\n\nvar _c;\n\n$RefreshReg$(_c, \"GraphPlot\");","map":{"version":3,"sources":["/media/spektrum/Data/Projek/sambigede/sambigede/src/component/SensorPlot.js"],"names":["React","useEffect","useState","Line","firebase","GraphPlot","props","dbList","setDbList","sensorDate","setSensorDate","sensorTime","setSensorTime","sensorPH","setSensorPH","sensorTDS","setSensorTDS","sensorDO","setSensorDO","sensorEC","setSensorEC","sensorORC","setSensorORC","sensorTEMP","setSensorTEMP","dbRef","database","ref","on","snapshot","db","val","phList","id","push","ph","console","log"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,IAAT,QAAqB,iBAArB;AACA,OAAOC,QAAP,MAAqB,kBAArB;;;AAEA,SAASC,SAAT,CAAmBC,KAAnB,EAA0B;AAAA;;AAEtB,QAAM,CAACC,MAAD,EAAQC,SAAR,IAAqBN,QAAQ,EAAnC;AAEA,QAAM,CAACO,UAAD,EAAgBC,aAAhB,IAAmCR,QAAQ,EAAjD;AACA,QAAM,CAACS,UAAD,EAAgBC,aAAhB,IAAmCV,QAAQ,EAAjD;AACA,QAAM,CAACW,QAAD,EAAcC,WAAd,IAA+BZ,QAAQ,EAA7C;AACA,QAAM,CAACa,SAAD,EAAcC,YAAd,IAA+Bd,QAAQ,EAA7C;AACA,QAAM,CAACe,QAAD,EAAcC,WAAd,IAA+BhB,QAAQ,EAA7C;AACA,QAAM,CAACiB,QAAD,EAAcC,WAAd,IAA+BlB,QAAQ,EAA7C;AACA,QAAM,CAACmB,SAAD,EAAcC,YAAd,IAA+BpB,QAAQ,EAA7C;AACA,QAAM,CAACqB,UAAD,EAAcC,aAAd,IAA+BtB,QAAQ,EAA7C;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMwB,KAAK,GAAGrB,QAAQ,CAACsB,QAAT,GAAoBC,GAApB,CAAwB,aAAxB,CAAd;AACAF,IAAAA,KAAK,CAACG,EAAN,CAAS,OAAT,EAAkBC,QAAD,IAAc;AAC3B,YAAMC,EAAE,GAAGD,QAAQ,CAACE,GAAT,EAAX;AACA,YAAMC,MAAM,GAAG,EAAf;;AAEA,WAAK,IAAIC,EAAT,IAAeH,EAAf,EAAkB;AACdE,QAAAA,MAAM,CAACE,IAAP,CAAY;AAACD,UAAAA,EAAD;AAAK,aAAGH,EAAE,CAACG,EAAD,CAAF,CAAOE;AAAf,SAAZ;AACH;;AAED3B,MAAAA,SAAS,CAACD,MAAD,CAAT;AACA6B,MAAAA,OAAO,CAACC,GAAR,CAAYL,MAAZ;AACH,KAVD;AAWH,GAbQ,EAaP,EAbO,CAAT;AAeA,sBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH;;GAjCQ3B,S;;KAAAA,S;AAmCT,eAAeA,SAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport firebase from '../util/firebase'\n\nfunction GraphPlot(props) {\n    \n    const [dbList,setDbList] = useState()\n\n    const [sensorDate,    setSensorDate]   = useState()\n    const [sensorTime,    setSensorTime]   = useState()\n    const [sensorPH,    setSensorPH]   = useState()\n    const [sensorTDS,   setSensorTDS]  = useState()\n    const [sensorDO,    setSensorDO]   = useState()\n    const [sensorEC,    setSensorEC]   = useState()\n    const [sensorORC,   setSensorORC]  = useState()\n    const [sensorTEMP,  setSensorTEMP] = useState()\n\n    useEffect(() => {\n        const dbRef = firebase.database().ref('realtime-db')\n        dbRef.on('value',(snapshot) => {\n            const db = snapshot.val()\n            const phList = []\n\n            for (let id in db){\n                phList.push({id, ...db[id].ph})\n            }\n            \n            setDbList(dbList)\n            console.log(phList);\n        })\n    },[])\n\n    return (\n        <div>\n            test\n        </div>\n    );\n}\n\nexport default GraphPlot;"]},"metadata":{},"sourceType":"module"}