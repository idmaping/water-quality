{"ast":null,"code":"var _jsxFileName = \"/media/spektrum/Data/Projek/sambigede/sambigede/src/component/SensorPlot.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport firebase from '../util/firebase';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction GraphPlot(props) {\n  _s();\n\n  const [sensorDate, setSensorDate] = useState();\n  const [sensorTime, setSensorTime] = useState();\n  const [sensorPH, setSensorPH] = useState();\n  const [sensorTDS, setSensorTDS] = useState();\n  const [sensorDO, setSensorDO] = useState();\n  const [sensorEC, setSensorEC] = useState();\n  const [sensorORC, setSensorORC] = useState();\n  const [sensorTEMP, setSensorTEMP] = useState();\n  const [sensorLon, setSensorLon] = useState();\n  const [sensorLat, setSensorLat] = useState();\n  const [dbList, setDbList] = useState();\n  const listDate = [];\n  const listTime = [];\n  const listPH = [];\n  const listTDS = [];\n  const listDO = [];\n  const listEC = [];\n  const listORC = [];\n  const listTEMP = [];\n  const listLon = [];\n  const listLat = [];\n  const listDb = [];\n  useEffect(() => {\n    const dbRef = firebase.database().ref('realtime-db');\n    dbRef.on('value', snapshot => {\n      const db = snapshot.val();\n\n      for (let id in db) {\n        listDate.push({\n          id,\n          ...db[id].date\n        });\n        listTime.push({\n          id,\n          ...db[id].time\n        });\n        listPH.push({\n          id,\n          ...db[id].ph\n        });\n        listTDS.push({\n          id,\n          ...db[id].tds\n        });\n        listDO.push({\n          id,\n          ...db[id].do\n        });\n        listEC.push({\n          id,\n          ...db[id].ec\n        });\n        listORC.push({\n          id,\n          ...db[id].orc\n        });\n        listTEMP.push({\n          id,\n          ...db[id].temp\n        });\n        listLon.push({\n          id,\n          ...db[id].lon\n        });\n        listLat.push({\n          id,\n          ...db[id].lat\n        });\n        listDb.push({\n          id,\n          ...db[id]\n        });\n      } //setDbList(listDb)\n      //setSensorDate(listDate)\n      //setSensorTime(listTime)\n      //setSensorPH(listPH)\n      //setSensorTDS(listTDS)\n      //setSensorDO(listDO)\n      //setSensorEC(listEC)\n      //setSensorORC(listORC)\n      //setSensorTEMP(listTEMP)\n      //setSensorLon(listLon)\n      //setSensorLat(listLat)\n      //console.log(listTDS);\n\n    });\n  }, []);\n  const data = {\n    labels: sensorTime,\n    datasets: [{\n      label: '# of Votes',\n      data: sensorTDS,\n      fill: false,\n      backgroundColor: 'rgb(255, 99, 132)',\n      borderColor: 'rgba(255, 99, 132, 0.2)'\n    }]\n  };\n  const options = {\n    scales: {\n      yAxes: [{\n        ticks: {\n          beginAtZero: true\n        }\n      }]\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Line, {\n      data: data,\n      options: options\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 9\n  }, this);\n}\n\n_s(GraphPlot, \"7wHJmNFbEoYoBG78rayjqgu9K/8=\");\n\n_c = GraphPlot;\nexport default GraphPlot;\n\nvar _c;\n\n$RefreshReg$(_c, \"GraphPlot\");","map":{"version":3,"sources":["/media/spektrum/Data/Projek/sambigede/sambigede/src/component/SensorPlot.js"],"names":["React","useEffect","useState","Line","firebase","GraphPlot","props","sensorDate","setSensorDate","sensorTime","setSensorTime","sensorPH","setSensorPH","sensorTDS","setSensorTDS","sensorDO","setSensorDO","sensorEC","setSensorEC","sensorORC","setSensorORC","sensorTEMP","setSensorTEMP","sensorLon","setSensorLon","sensorLat","setSensorLat","dbList","setDbList","listDate","listTime","listPH","listTDS","listDO","listEC","listORC","listTEMP","listLon","listLat","listDb","dbRef","database","ref","on","snapshot","db","val","id","push","date","time","ph","tds","do","ec","orc","temp","lon","lat","data","labels","datasets","label","fill","backgroundColor","borderColor","options","scales","yAxes","ticks","beginAtZero"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport firebase from '../util/firebase'\n\nfunction GraphPlot(props) {\n\n    const [sensorDate, setSensorDate] = useState()\n    const [sensorTime, setSensorTime] = useState()\n    const [sensorPH, setSensorPH] = useState()\n    const [sensorTDS, setSensorTDS] = useState()\n    const [sensorDO, setSensorDO] = useState()\n    const [sensorEC, setSensorEC] = useState()\n    const [sensorORC, setSensorORC] = useState()\n    const [sensorTEMP, setSensorTEMP] = useState()\n    const [sensorLon, setSensorLon] = useState()\n    const [sensorLat, setSensorLat] = useState()\n    const [dbList, setDbList] = useState()\n\n    const listDate = []\n    const listTime = []\n    const listPH = []\n    const listTDS = []\n    const listDO = []\n    const listEC = []\n    const listORC = []\n    const listTEMP = []\n    const listLon = []\n    const listLat = []\n    const listDb = []\n\n    useEffect(() => {\n        const dbRef = firebase.database().ref('realtime-db')\n        dbRef.on('value', (snapshot) => {\n            const db = snapshot.val()\n\n\n\n\n            for (let id in db) {\n                listDate.push({ id, ...db[id].date })\n                listTime.push({ id, ...db[id].time })\n                listPH.push({ id, ...db[id].ph })\n                listTDS.push({ id, ...db[id].tds })\n                listDO.push({ id, ...db[id].do })\n                listEC.push({ id, ...db[id].ec })\n                listORC.push({ id, ...db[id].orc })\n                listTEMP.push({ id, ...db[id].temp })\n                listLon.push({ id, ...db[id].lon })\n                listLat.push({ id, ...db[id].lat })\n                listDb.push({ id, ...db[id] })\n            }\n\n            //setDbList(listDb)\n            //setSensorDate(listDate)\n            //setSensorTime(listTime)\n            //setSensorPH(listPH)\n            //setSensorTDS(listTDS)\n            //setSensorDO(listDO)\n            //setSensorEC(listEC)\n            //setSensorORC(listORC)\n            //setSensorTEMP(listTEMP)\n            //setSensorLon(listLon)\n            //setSensorLat(listLat)\n\n            //console.log(listTDS);\n        })\n    }, [])\n\n    const data = {\n\n        labels: sensorTime,\n        datasets: [\n            {\n                label: '# of Votes',\n                data: sensorTDS,\n                fill: false,\n                backgroundColor: 'rgb(255, 99, 132)',\n                borderColor: 'rgba(255, 99, 132, 0.2)',\n            },\n        ],\n    }\n\n    const options = {\n        scales: {\n            yAxes: [\n                {\n                    ticks: {\n                        beginAtZero: true,\n                    },\n                },\n            ],\n        },\n    }\n\n\n\n    return (\n        <div>\n\n            <Line data={data} options={options} />\n        </div>\n    );\n}\n\nexport default GraphPlot;"]},"metadata":{},"sourceType":"module"}